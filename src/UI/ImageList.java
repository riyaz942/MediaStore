/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UI;

import Database.MediaBase;
import Holders.AudioHolder;
import Holders.InfoHolder;
import Holders.VideoHolder;
import UI.Library.StretchIcon;
import Util.Print;
import java.awt.Component;
import java.awt.Dimension;
import java.io.File;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.TableCellRenderer;

/**
 *
 * @author sasuke
 */
public class ImageList extends javax.swing.JFrame {

    /**
     * Creates new form ImageList
     */
    
    ArrayList<InfoHolder> holder;
    String columns[];
    
    public ImageList() {
        initComponents();
    }
    
    public ImageList(String folderName){
    
        MediaBase base = new MediaBase();
        
        try {
            holder = base.queryGetImageList(folderName);
            base.close();
        } catch (SQLException ex) {
            Logger.getLogger(ImageList.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        columns = new String[]{"","File","Folder Name","Path",""};
        
        initComponents();
      
        jTable1.setRowHeight(50);
        
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                int row = jTable1.rowAtPoint(evt.getPoint());
                int col = jTable1.columnAtPoint(evt.getPoint());
                if (row >= 0 && col >= 0) {
                        Print.print(""+row);
                     new AudioDetail(holder.get(row)).setVisible(true);
                }
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable(){
            public TableCellRenderer getCellRenderer( int row, int column ) {
                return new PlusMinusCellRenderer();
            }
        };

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable1.setModel(new ImagesTableModel(holder,columns));
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 699, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 449, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ImageList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ImageList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ImageList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ImageList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ImageList().setVisible(true);
            }
        });
    }
    
    
    public class ImagesTableModel extends AbstractTableModel {

    private ArrayList<InfoHolder> holder;
    private String columns[];
    
    public ImagesTableModel(ArrayList<InfoHolder> holder,String columns[]) {
        this.holder=holder;
        this.columns=columns;
    }

    public int getColumnCount() {
        return columns.length;
    }

    public int getRowCount() {
        return holder.size();
    }

    public String getColumnName(int columnIndex) {      
        return columns[columnIndex];
    }

    public Object getValueAt(int rowIndex, int columnIndex) {
        VideoHolder ah =(VideoHolder) holder.get(rowIndex);

        switch (columnIndex) {
        case 0: return ah.Path;
        case 1: return ah.File_Name ;
        case 2: return ah.Folder_Name;
        case 3: return ah.Path;
        case 4: return "";
        }
        
        return null;
    }
}
        
    
    class PlusMinusCellRenderer extends JPanel implements TableCellRenderer {
        public Component getTableCellRendererComponent(
                            final JTable table, Object value,
                            boolean isSelected, boolean hasFocus,
                            int row, int column) {
               
            
            switch (column) {
                case 4:
                    this.add( new JButton("Delete"));
                    break;
                case 0:
                    File file = new File(value.toString());
                    
                    if(file.exists()){
                    JLabel label = new JLabel();
                    StretchIcon icon = new StretchIcon(file.getPath());
                    label.setIcon(icon);
                    label.setPreferredSize(new Dimension(40,40));
                
                    this.add(label);
                    }
                  break;
                default:
                   
                    JLabel label;
                    if(value!=null)
                    label= new JLabel(value.toString());
                    else
                        label = new JLabel();
                     
                    this.add( label );
                    break;
            }
                
                return this;
        }
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
